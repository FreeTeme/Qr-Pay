# main.py
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from config import BOT_TOKEN, ADMINS, BOT_USERNAME
from db import get_business, get_session, get_user  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
from models import User, Business, UserBusiness, Purchase
from qr_utils import generate_qr
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError
from sqlalchemy.exc import SQLAlchemyError
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class BusinessCreation(StatesGroup):
    AWAITING_NAME = State()
    AWAITING_CONVERSION_RATE = State()

class PaymentStates(StatesGroup):
    AWAITING_AMOUNT = State()
    AWAITING_POINTS = State()

class PurchaseStates(StatesGroup):
    AWAITING_AMOUNT = State()
    AWAITING_POINTS = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_payment_keyboard(user_id: int, business_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        callback_data=f"process_payment:{user_id}:{business_id}"
    )
    return builder.as_markup()

from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton

@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: Command):
    args = command.args
    session = get_session()
    
    try:
        if args and args.startswith("business_"):
            try:
                _, business_id_str = args.split("_")
                business_id = int(business_id_str)
            except (ValueError, IndexError):
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
                return

            business = session.get(Business, business_id)
            if not business:
                await message.answer("‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user:
                user = User(
                    telegram_id=message.from_user.id,
                    full_name=message.from_user.full_name,
                    username=message.from_user.username,
                )
                session.add(user)
                session.commit()

            user_business = session.query(UserBusiness).filter_by(
                user_id=user.id,
                business_id=business.id
            ).first()
            if not user_business:
                user_business = UserBusiness(
                    user_id=user.id,
                    business_id=business.id,
                    points=0,
                )
                session.add(user_business)
                session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
            try:
                await bot.send_message(
                    chat_id=business.admin_id,
                    text=(
                        "üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
                        f"üë§ –ò–º—è: {user.full_name}\n"
                        f"üì± –õ–æ–≥–∏–Ω: @{user.username}\n"
                        f"‚≠ê –ë–∞–ª–ª–æ–≤: {user_business.points}"
                    ),
                    reply_markup=get_payment_keyboard(user.id, business.id)
                )
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

            web_app_url = f"https://app.qrpay.tw1.su/?user_id={message.from_user.id}&business_id={business.admin_id}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=web_app_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º WebApp –≤–º–µ—Å—Ç–æ url
                )]
            ])

            await message.answer(
                f"üîó –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–∏–∑–Ω–µ—Å—É: {business.name}\n"
                f"üí∞ –í–∞—à–∏ –±–∞–ª–ª—ã: {user_business.points}\n\n"
                "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=keyboard
            )
        else:
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
                url='https://app.qrpay.tw1.su/bis/'
            ))
            
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SaveX!\n\n"
                "*–õ–æ—è–ª—å–Ω–æ—Å—Ç—å*\n"
                "QR-–∫–æ–¥ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑. –∫–∞—Ä—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–µ–π - –∫–ª–∏–µ–Ω—Ç—ã –∫–æ–ø—è—Ç –±–∞–ª–ª—ã, –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—á–∞—è —ç—Ç–æ–≥–æ!\n\n"
                "*–î–ª—è –±–∏–∑–Ω–µ—Å–∞*\n"
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç - –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–æ—Ä–æ–≥–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫",
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
    except SQLAlchemyError as e:
        session.rollback()
        logger.error(f"Database error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        session.close()

@dp.message(Command("add_business"))
async def add_business_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    await state.set_state(BusinessCreation.AWAITING_NAME)


# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("process_payment:"))
async def start_payment_process(callback: CallbackQuery, state: FSMContext):
    try:
        _, user_id_str, business_id_str = callback.data.split(":")
        user_id = int(user_id_str)
        business_id = int(business_id_str)
        
        await state.update_data(
            user_id=user_id,
            business_id=business_id
        )
        
        await callback.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:")
        await state.set_state(PurchaseStates.AWAITING_AMOUNT)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø–ª–∞—Ç—ã")
# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# --------------------------------------------

@dp.message(PurchaseStates.AWAITING_AMOUNT)
async def process_purchase_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=amount)
        await message.answer("üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:")
        await state.set_state(PurchaseStates.AWAITING_POINTS)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.message(PurchaseStates.AWAITING_POINTS)
async def process_purchase_points(message: Message, state: FSMContext):
    session = get_session()
    try:
        data = await state.get_data()
        user_id = data["user_id"]
        business_id = data["business_id"]
        amount = data["amount"]
        points = int(message.text)  # –ë–∞–ª–ª—ã –≤—Å–µ–≥–¥–∞ —Ü–µ–ª—ã–µ
        
        user_business = session.query(UserBusiness).filter_by(
            user_id=user_id,
            business_id=business_id
        ).first()
        
        business = session.get(Business, business_id)

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤
        if points > user_business.points:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤")
            return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ 50% –ª–∏–º–∏—Ç–∞
        max_allowed_points = int(amount * 0.5)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if points > max_allowed_points:
            await message.answer(f"‚ùå –ú–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_allowed_points} –±–∞–ª–ª–æ–≤")
            return

        # 3. –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
        user_business.points -= points

        # 4. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏)
        if points == 0:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
            bonus = round(amount * (business.conversion_rate / 100))
            user_business.points += bonus

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        session.add(Purchase(
            user_id=user_id,
            business_id=business_id,
            amount=amount,
            points_used=points
        ))
        session.commit()

        await message.answer(
            "‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
            f"üíµ –°—É–º–º–∞: {amount:.2f}\n"
            f"üé´ –°–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤: {points}\n"
            f"‚≠ê –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_business.points}"
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        session.rollback()
    finally:
        await state.clear()
        session.close()

        
@dp.message(BusinessCreation.AWAITING_NAME)
async def process_business_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 10):")
    await state.set_state(BusinessCreation.AWAITING_CONVERSION_RATE)

@dp.message(BusinessCreation.AWAITING_CONVERSION_RATE)
async def process_conversion_rate(message: Message, state: FSMContext):
    session = get_session()
    try:
        rate = float(message.text)
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        new_business = Business(
            name=data['name'],
            conversion_rate=rate,
            admin_id=message.from_user.id
        )
        session.add(new_business)
        session.commit()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR
        qr_buffer = generate_qr(new_business.id)
        await message.answer_photo(
            BufferedInputFile(
                file=qr_buffer.getvalue(),  # –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                filename="qr_code.png"      # –ò–º—è —Ñ–∞–π–ª–∞
            ),
            caption="–í–∞—à QR-–∫–æ–¥"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞")
    finally:
        await state.clear()
        session.close()

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–æ–≤
# --------------------------------------------

async def handle_qr_scan(message: types.Message, business_id: int):
    session = get_session()
    try:
        business = get_business(business_id)
        if not business:
            return await message.answer("‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = get_user(message.from_user.id)
        user_business = session.query(UserBusiness).filter_by(
            user_id=user.id,
            business_id=business.id
        ).first()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not user_business:
            user_business = UserBusiness(
                user_id=user.id,
                business_id=business.id,
                points=0
            )
            session.add(user_business)
            session.commit()
        
        await message.answer(
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {business.name}\n"
            f"‚≠ê –í–∞—à–∏ –±–∞–ª–ª—ã: {user_business.points}"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å—É
        await bot.send_message(
            business.admin_id,
            f"üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
            f"üë§ {user.full_name}\n"
            f"üì± @{user.username}\n"
            f"üí∞ –ë–∞–ª–ª–æ–≤: {user_business.points}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="üí≥ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É",
                        callback_data=f"process_payment_{user.id}_{business.id}"
                    )
                ]]
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR: {str(e)}")
    finally:
        session.close()

# --------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
# --------------------------------------------

@dp.callback_query(F.data.startswith("process_payment_"))
async def start_payment(callback: CallbackQuery, state: FSMContext):
    _, user_id, business_id = callback.data.split('_')
    await state.update_data(
        user_id=int(user_id),
        business_id=int(business_id)
    )
    await callback.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:")
    await state.set_state(PaymentStates.AWAITING_AMOUNT)

@dp.message(PaymentStates.AWAITING_AMOUNT)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await message.answer("üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (0 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
        await state.set_state(PaymentStates.AWAITING_POINTS)
    except:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")

@dp.message(PaymentStates.AWAITING_POINTS)
async def process_points(message: Message, state: FSMContext):
    session = get_session()
    try:
        data = await state.get_data()
        points = int(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_business = session.query(UserBusiness).filter_by(
            user_id=data['user_id'],
            business_id=data['business_id']
        ).first()
        
        business = session.query(Business).get(data['business_id'])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤
        if points < 0 or points > user_business.points:
            return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤")
        
        # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
        user_business.points -= points
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏
        if points == 0:
            bonus = data['amount'] * (business.conversion_rate / 100)
            user_business.points += bonus
        
        # –ó–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏
        purchase = Purchase(
            user_id=data['user_id'],
            business_id=data['business_id'],
            amount=data['amount'],
            points_used=points
        )
        session.add(purchase)
        session.commit()
        
        await message.answer(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"üíµ –°—É–º–º–∞: {data['amount']}\n"
            f"üé´ –°–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤: {points}\n"
            f"‚≠ê –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_business.points}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await state.clear()
        session.close()

# --------------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# --------------------------------------------


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    dp.run_polling(bot)
