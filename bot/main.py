# main.py
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from config import BOT_TOKEN, ADMINS, BOT_USERNAME
from db import get_session  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
from models import User, Business, UserBusiness, Purchase
from qr_utils import generate_qr
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError
from sqlalchemy.exc import SQLAlchemyError

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class BusinessCreation(StatesGroup):
    AWAITING_NAME = State()
    AWAITING_CONVERSION_RATE = State()

class PaymentStates(StatesGroup):
    AWAITING_AMOUNT = State()
    AWAITING_POINTS = State()

class PurchaseStates(StatesGroup):
    AWAITING_AMOUNT = State()
    AWAITING_POINTS = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_payment_keyboard(user_id: int, business_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        callback_data=f"process_payment:{user_id}:{business_id}"
    )
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: Command):
    args = command.args
    session = get_session()
    try:
        if args and args.startswith("business_"):
            try:
                _, business_id_str = args.split("_")
                business_id = int(business_id_str)
            except (ValueError, IndexError):
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
                return

            business = session.get(Business, business_id)
            if not business:
                await message.answer("‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
            if not user:
                user = User(
                    telegram_id=message.from_user.id,
                    full_name=message.from_user.full_name,
                    username=message.from_user.username,
                )
                session.add(user)
                session.commit()

            user_business = session.query(UserBusiness).filter_by(
                user_id=user.id,
                business_id=business.id
            ).first()
            if not user_business:
                user_business = UserBusiness(
                    user_id=user.id,
                    business_id=business.id,
                    points=0,
                )
                session.add(user_business)
                session.commit()

            try:
                await bot.send_message(
                    chat_id=business.admin_id,
                    text=(
                        "üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n"
                        f"üë§ –ò–º—è: {user.full_name}\n"
                        f"üì± –õ–æ–≥–∏–Ω: @{user.username}\n"
                        f"‚≠ê –ë–∞–ª–ª–æ–≤: {user_business.points}"
                    ),
                    reply_markup=get_payment_keyboard(user.id, business.id)
                )
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

            await message.answer(
                f"üîó –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–∏–∑–Ω–µ—Å—É: {business.name}\n"
                f"üí∞ –í–∞—à–∏ –±–∞–ª–ª—ã: {user_business.points}"
            )
        else:
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    except SQLAlchemyError as e:
        session.rollback()
        logger.error(f"Database error: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        session.close()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç get_session() –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    dp.run_polling(bot)
